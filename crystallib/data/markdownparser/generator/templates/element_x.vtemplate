module elements

pub struct @{eo.classname} {
	DocBase	
pub mut:
	replaceme string
}

pub fn (mut self @{eo.classname}) process() !int {
	for mut parent in self.parents{
		parent.elements<<self
	}	
	if self.processed{		
		return 0
	}
	self.processed = true
	return 1
}

pub fn (mut self @{eo.classname}) markdown() string {
	mut out:= self.content
	out+=self.DocBase.markdown()
	return out
}

pub fn (mut self @{eo.classname}) html() string {
	mut out:= self.content
	out+=self.DocBase.html()
	return out
}


[params]
pub struct @{eo.classname}NewArgs{
	ElementNewArgs
pub mut:
	replaceme string
}

pub fn @{eo.name}_new(args_ @{eo.classname}NewArgs) @{eo.classname} {
	mut args:=args_
	mut a:=@{eo.classname}{
		content: args.content
		replaceme: args.replaceme
		type_"@{eo.name}"
		parents:args.parents
	}
	if args.add2parent{
		for mut parent in a.parents{
			parent.elements << a
		}
	}	
	return a
}

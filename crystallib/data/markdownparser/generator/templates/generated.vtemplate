
module elements

type DocElement = ${elementtypes}

fn (mut self DocBase) process_elements() !int {
	//loop over the process table, only when no changes are further done we stop
	for {
		mut result:=[]DocElement{}
		mut changes:=0
		mut elements := self.elements.clone()
		self.elements = []DocElement{}
		for mut element in elements {
			match mut element {
				@for eo in elementsobj
				@eo.classname {
					changes+=element.process()!
				}
				@end
			}
		}
		if changes==0{
			break
		}
		self.elements = result		
	}
	return 0
}

pub fn (mut self DocBase) markdown() string {
	mut out := ''
	for mut element in self.elements {
		match mut element {
			@for eo in elementsobj
			@eo.classname { out += element.markdown() }
			@end			
		}
	}
	return out
}

pub fn (mut self DocBase) html() string {
	mut out := ''
	for mut element in self.elements {
		match mut element {
			@for eo in elementsobj
			@eo.classname { out += element.html() }
			@end			
		}
	}
	return out
}

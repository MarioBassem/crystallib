module ${args.name}

// import freeflowuniverse.crystallib.osal
// import freeflowuniverse.crystallib.core.pathlib
// import freeflowuniverse.crystallib.develop.gittools
import freeflowuniverse.crystallib.core.texttools
@if "mail" in args.clients
// import freeflowuniverse.crystallib.clients.mail
@end
@if "postgres" in args.clients

@end
import os

pub struct ${args.name.capitalize()} {
pub mut:
	name string
	config Config
}

pub fn new (args_ Config) !${args.name.capitalize()} {

	mut args:=args_
	args.name = texttools.name_fix(args.name)

	configure_init(args.reset, mut args)!

	mut o:= ${args.name.capitalize()} {
		name:args.name
		config:args
	}

	return o

}


pub fn (mut self ${args.name.capitalize()} ) configure(interactive bool, mut args Config) ! {
	@if args.configure_interactive	
	if interactive{
		configure_ask(mut args)!
	}
	@end
	//reset the values on the disk
	configure_init(true, mut args)!
}



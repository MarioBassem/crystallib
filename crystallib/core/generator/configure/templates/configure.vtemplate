module ${args.name}

import freeflowuniverse.crystallib.osal
import freeflowuniverse.crystallib.core.pathlib
@if args.configure_interactive
import freeflowuniverse.crystallib.ui
import freeflowuniverse.crystallib.ui.console
@end
// import freeflowuniverse.crystallib.osal.gittools
import os

^^[params]
pub struct Config {
pub mut:
	name                       string = 'default'
	dest                       string = '/data/${args.name}'
	passwd                     string ^^[required]
	postgresql_name            string = 'default'
	domain                     string ^^[required]
	title string
	timezone string = "Africa/Kinshasa"
	mail_from       string ^^[required]
	smtp_addr       string ^^[required]
	smtp_login      string ^^[required]
	smpt_port       int = 587
	smtp_passwd     string ^^[required]	
}

fn configure_init(reset bool,mut args Config) ! {
	mut args:=args_
	args.name = texttools.name_fix(args.name)

	key := '${args.name}_config_${args.name}'
	mut kvs := fskvs.new(name: 'config')!
	if args.reset || !kvs.exists(key) {
		data := json.encode_pretty(args)
		kvs.set(key, data)!
	}
	data := kvs.get(key)!
	args = json.decode(Config, data)!

	@if template_items.len>0
	dest:=args.dest
	if !(os.exists("??{dest}")){
		return error("can't find dest: ??{dest}")
	}
	@end

	@for t in template_items
	pathlib.template_write(??tmpl("templates/${t.path}"),
								  "??{dest}/${t.path}",args.reset)!
	@end	

	??if debug{println(' - ${args.name} configured properly.')}

}


@if args.configure_interactive
fn configure_ask(mut args Config) ! {
	mut myui := ui.new()!
	console.clear()

	// ok := myui.ask_yesno(
	// 	question: "are you sure you want to ...'?"
	// )!
	// if !ok {
	// 	return error("can't continue, user aborted.")
	// }
	// args.email_from=mygui.ask_question(question:"email from addr.")

}
@end